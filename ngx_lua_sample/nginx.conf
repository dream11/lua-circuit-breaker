# vi:ft=nginx:
events {
  worker_connections 1024;
}

error_log stderr;

http {
  resolver 127.0.0.11 ipv6=off;

  lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/lua/src/?.lua";
  lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;";


  init_by_lua_block {
    -- just forcing the bytecode pre-compilation
    -- source: https://blog.openresty.com/en/luajit-bytecode/
    require "resty.http"
    require "lua-circuit-breaker-ngx-usage"
  }

  # simultaing server using the circuit breaker lib
  server {
    listen 8080;

    location / {
      content_by_lua_block {
        local httpc = require("resty.http").new()
        httpc:set_timeout(300) -- 300ms timeout

        local circuit_breakers = require "lua-circuit-breaker-ngx-usage"
        local cb = circuit_breakers.get_circuit_breaker("my_cb", "my_group")

        -- Check state of cb. This function returns an error if the state is open or half_open_max_calls_in_window is breached.
        local _, err_cb = cb:_before()
        if err_cb then
          ngx.status = 500

          local err = {
            "Circuit breaker is open!"
          }
          ngx.print(err)
          ngx.exit(ngx.OK)
            return
        end
        local generation = cb._generation

        -- Call IO method for which circuit breaking is required.
        local res, err = httpc:request_uri("http://localhost:9090/lua_content")

        -- Update the state of the cb based on successful / failure response.
        local ok = res and res.status and res.status < 500
        cb:_after(generation, ok) -- generation is used to update the counter in the correct time bucket.

        if ok then
          ngx.say("done -> content(" .. res.body .. ")")
        else
          ngx.say("http io failed " .. err)
        end
      }
    }
  }

  # we're going to use a shared memory space to command faulty behaviour
  lua_shared_dict faulty_injection 100k;

  # simulating an faulty http service
  server {
    listen 9090;

    location /commands {
      content_by_lua_block {
        local faulty = ngx.shared.faulty_injection
        local to_upsert = ngx.req.get_method() == "GET" -- otherwise delete the faulty
        local args, err = ngx.req.get_uri_args() -- getting all uri args
                                                 -- timeout=30&response=500
        for key, val in pairs(args) do
          if to_upsert then
            faulty:set(key,val)
          else
            faulty:delete(key)
          end
        end

        ngx.say("done faulty service!!!")
      }
    }

    location /lua_content {
      content_by_lua_block {
        local faulty = ngx.shared.faulty_injection
        local timeout = faulty:get("timeout")
        local response = faulty:get("response")

        if response then
          ngx.log(ngx.ERR,"responding " .. response)
          if response == "403" then
            ngx.exit(ngx.HTTP_FORBIDDEN)
            return
          elseif response == "500" then
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end
        end

        if timeout ~= nil and timeout ~= "" then
          ngx.log(ngx.ERR,"sleeping " .. timeout .. " ms ")
          ngx.sleep(tonumber(timeout) * 0.001)
        end

        ngx.say("success response")
      }
    }
  }
}

